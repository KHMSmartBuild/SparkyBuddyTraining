good morning everyone going today welcome amazing tutorial im going show exactly build application seeing front ok let show real quick work graphical user interface course completely coded python write drop right pdf drop constitution united state show text input ask question pdf ok ask power veto legislation passed congress click enter answer based pdf ask question nothing pdf example distance earth moon example click enter see idea information find inside pdf ok show parse pdf divide different chunk also bonus im going show end track exactly much money youre spending per per request ok going building lynching im going explaining little bit lynching work amazing thing ok subscribe want video like going publishing many video lynching yeah let get right right first thing going going set environment ok see right created end file place going storing secret key case open ai api key dot end example one going tracked git one right actually secret actual api please careful want youre going want name api environment key exactly like youre going working open ai since going working lang chain requires environment variable open ai api exactly name otherwise recognise ok got open lower dash api low dash key right go going git ignore right im going come right im going copy standard git ignore know well covered app dot py place going start building application ok right first thing first going want install dependency dependency going need case line chain first π pdf two read pdf file going need python dot env enable environment variable going need streamlet create graphical user interface ok super fast already installed might take little bit longer also dont hesitate install additional dependency might need may forgotten youre running application might running problem like oh dependency installed dependency installed usually read error message tell dependency youre missing right go start im going going write basic test right line usually added every single time start python programme basically test application run directly imported actually execute main content application go let see look run see hello world alright go project set api key come right platformopenaicom create new secret key im going call pdf chat tutorial im going copy im going paste right save come right say 10 import load 1000 im going load dot end like im going print im going print also im also going need o import o im going im going able access api key ok show able access api key launching going behind scene o dot get environment get asked open ai oops open ai api key sorry supposed go inside supposed go inside print go save run see api key recognised file tracked git thats important keep secret secret right go project set start building application start parsing pdf file right let right time actually start creating graphical user interface im going disable get help copilot right code along go order create graphical user interface going using streamlet im going import streamlet already installed im going download imported st go actually start setting post configuration im going save page title page title going ask pdf go let set header ask pdf im going add little emoji like go im going create input im going able upload pdf ok im going sd file uploader im going say upload pdf right im going say type pdf like right order run im going let one second im going string lit going run im going target file right application life click enter going open new application already look pretty much like thats pretty good although far doesnt anything upload file right show uploaded doesnt anything else right let add little bit functionality right quick case dont know going stream lit extremely fast convenient way building kind application python see added three line code right 3 line code already output nice title nice nice tile go mean want explore kind component example right use file upload component see many many component use dont hesitate take look right time actually start adding logic application add pdf reader parser right let right going want actually take pdf file read far file right dont know text inside order read going use one library imported moment ago pdf two right im going π pdf 2 im going import class pdf pdf reader like one going allow take text pdf right im going want im going 1st test pdf file exists pdf null none im going going create new new pdf reader going im going pdf reader like im going use new class imported im going initialise pdf file user uploaded ok clear right uploading well right going extract text file ok pdf reader actually loop page pdf reader ok reader default allow take text allows take page text page first going take going look page extract text order going initialise empty string variable going say page pdf reader dot page going create list page element inside pdf reader im going say text text going concatenate page dot extract text method going take string text page text going going write application show going far ok im mistaken rerun thing upload constitution see constitution text right go seems working alright ok go going want afterwards figure way look information inside text ok let let get right problem remember said wanted language model answer question depending information pdf right mean normally something like chatgpt work gpt 35 model normally chatgpt would give text ask question underneath right send send something like paragraph say dont know write ask something paragraph right problem right much text feed enormous quantity text language model expect understand one go going want going split text similar sized chunk look inside chunk see chunk contain information corresponding question feed chunk language model ok found article internet guy girl called penneys might hack got nice diagram upscaled right shout nice diagram make super easy understand going right basically mean call book case pdf going extract content mean complete process going back application ok first take pdf extract content like content right going split two chunk right going take text going split going first chunk going second chunk going third chunk etc chunk going convert embeddings basically vector representation text mean basically see list number contains meaning text mean thats basic explanation number representation meaning text way vector going stored knowledge base user come asks question question going embedded using embedding technique used text chunk going allow u perform semantic search going find vector right similar vector question allow u find chunk actually contain information need chunk going feed language model like actually going get answer end right basically entire application going going work back ask question right right going going divide text chunk alright going using line chain right go going want going divide text chunk going using library im sorry function link chain right first im going lang chain thought text splitter im going import character text splitter right one right remember still inside pdf actually im going modularize moment right im going say extract mean uh split split chunk go let actually split chunk going first create text later like going use character text splitter class imported sorry mentioned function actually class object take different object different property first one going separator separator thats going define new line basically mean pdf single line break going new line chunk size chunk size like one going 1000 character ok basically mean text going take 1st 1000 character 2nd 1000 character third thousand character et cetera ok another thing called chunk overlap ok one im going set 200 chunk like mean overlap mean well basically mean come chunk size 1000 thousand somewhere like like middle sentence next chunk going start 200 mean like every time next chunk going start 200 character one first chunk 2nd chunk going something like third chunk going something like basically allows get context chunk alright split idea middle length function button length length function going use measure length chunk going python basic function length go text later initialised run create chunk like text splitter going say going split text going pas whole corpus text extracted pdf currently stored text variable right im going im going st right chunk see look like right im saving coming back going going refresh page im going upload constitution go first term mean see array see first chunk go way qualify dont know second one start section 2 see section 2 mean basically make easier context mean overlap work right 200 character said wanted overlap full chunk going use create embeddings look actual information later right go chunk let convert embeddings right go see chunk going convert embeddings basically right already text already extracted content divided different chunk want want convert chunk embeddings turn take embeddings make knowledge base going document object going able run similarity mean semantic search find chunk actually relevant question ok let show first thing going want going want import land chain dot embeddings dot open ai going import open ai embeddings like ok mean importing land chain come opening eye wrapper ok right going going say embeddings going equal open ai embeddings like going add comment right create embedded thing go embeddings actually create object going able going able search right order search document going use ai face facebook ai similarity search library basically library developed facebook allows perform similarity search semantic search knowledge base ok going import one order import going say also line chain vector store going import file go actually create document able perform semantic search im going say document going vice text going create chunk text going say first argument going pas chunk right second one embeddings going use embeddings open ai ok yeah looking pretty good let change name right knowledge base actually finished creating ok successfully created knowledge base pdf file let show diagram showed exactly time already imported pdf file extracted text pdf file split several chunk make easier language model work one chunk used open ui embeddings convert two vector representation chunk used facebook semantic search ai build knowledge base going able look chunk using embeddings related user question ok whenever user asks question going come knowledge base created going run semantic search find chunk closer question send language model use answer question ok far mean successfully finished part part going going start coding part user interaction part ok let get right right right going basically add input element right ok user going able ask question ok idea im going upload pdf pdf properly uploaded extracted text split chunk created knowledge base embeddings going show input text input labelled ask question pdf go going store value input variable called user question like save refresh upload file see running mean mean splitting embedding question right im going im going say im going show user input go user question going user question going look knowledge base see find chunk could important information question ok order going create new new element called doc going document going mean document contain important information chunk contain information question going say going search knowledge base going go similarity search method phase class facebook similar search ai going look user question go let write doc see found ok save refresh right drag constitution go see running embedding etc come ask question press enter going perform similarity search going find chunk relevant question according facebook ai knowledge base four chunk likely contain information need respond question ok talk going use actually answer question language model ok let perfect mentioned going going use document right chunk retrieved similarity search question right actually answer question based chunk text right length chain actually come convenient chain already built ok one actually one right question answering doc chain looking called load qa chain take language model parameter going using open ai mean use language model want use open source language model mean one take pretty much language model wrapper right im going publish crash course line launching soon see mean actually work mean many many language model work ok since going working open ai going copy right going paste go one since importing going put right like see come line chain chain question answering module going say language model going using language model actually going open like ok also going download launching also mean course open ai language model come wrapper inside languaging ok doesnt mean come launching wrapper launching llns im going import open ai go right llm passing right chain type stuff thats right actually run saying input document going document retrieved knowledge base question going ask user question go go one actually going going going return response like response go um suppose basically st write response go study right think thats right work reminder catching question input performing semantic search knowledge base thing right doc one result semantic search using language model generate answer using line chain rebuild chain ok youre saying looking doc user question showing response let save come back application refresh let take constitution running bedding ask question know answer let say minimum age someone elected senator 30 year seems know ask something completely unrelated constitution let say age paul paul mccartney even sure thats thats written right question related context go right thats already application thats working pretty good thing want know much spending per question ok im going modularize pretty quick let cheque much money spending quick question let right know changed mind im going show modularized suppose im going go directly pricing ok monitor much youre spending per question order actually launching come convenient monitor however currently work open ai allows see exactly much money spend per operation case per question answered language model ok im going im going import line chain callback go im going import get opening call back ok show real quick also go back open ai come platform open ai see usage see much money spent per day using apis ok example im recording day im uploading ive spent 90 cent quite expensive budget test also mean keep mind way seen playing around day definitely doesnt account test youve seen video going going take function lang chain going wrap whenever using open ai language model ok im going say one right callback going say cb callback inside im going run whichever whatever want tracked whatever want track price ok im going track much im spending generation executing chain inside im going print callback thats actually save im going im going restart stream lit like go go back application huh go refresh actually im going show real time let see terminal application going put going put going take constitution upload go actually ask whichever question want im going ask many senator state ok click enter see exactly much money spending right ok let zoom little bit go answer 2 manager operation apparently costed around 1000 token costed around 002 one answer ok look pretty good ask another question get thing like example let say power veto legislation passed congress let saying president power veto legislation also around two cent right convenient function order track spending yeah mean dont forget use probably wrap entire programme entire function go thats track spending right application thats working correctly know much exactly much youre spending per question weve built graphical user interface using python hope understand diet mean whats actually going behind scene application hope clear dont forget ask question dont forget subscribe want video like yeah thank much watching ill see next time