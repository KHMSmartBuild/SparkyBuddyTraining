# Script name: sparky_assistant_gpt4.py
# location: location
# Function: Sparky AI assistant for electricians using GPT-4 API
# Accessible from Libraries: yes

import os
import openai
import json
from dotenv import load_dotenv
from settings.commands.QuotingCommands import Quoting
from settings.commands.InventoryControlCommands import InventoryControl 
from settings.commands.PayrollCommands import Payroll 
from sparky_personality_description import SparkyPersonalityDescription
from Sparky_commands import *
import logging

# Create a custom logger
logger = logging.getLogger(__name__)

# Set the level of this logger. This can be changed to DEBUG, INFO, WARNING, ERROR, CRITICAL as per your need.
logger.setLevel(logging.DEBUG)

# Create handlers
c_handler = logging.StreamHandler()  # Console handler
f_handler = logging.FileHandler('sparky_assistantgpt4.log')  # File handler
c_handler.setLevel(logging.WARNING)  # Setting console handler level to WARNING
f_handler.setLevel(logging.DEBUG)  # Setting file handler level to DEBUG

# Create formatters and add it to handlers
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger
logger.addHandler(c_handler)
logger.addHandler(f_handler)
load_dotenv()

class SparkyAssistantGPT4:
    def __init__(self):
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.organization = os.getenv("OPENAI_ORGANIZATION_ID")
        self.temperature = float(os.getenv("TEMPERATURE", 0))
        self.sparky_features = [Quoting(), InventoryControl(), Payroll()]
        self.personality = SparkyPersonalityDescription()

    def generate_response(self, user_input):
        """
        Generates a response from the AI assistant for electricians using GPT-4 API based on the given user input.

        Parameters
        ----------
        user_input : str
            The input text from the user.

        Returns
        -------
        str
            A response generated by the AI assistant.

        """
        openai.api_key = self.api_key
        openai.organization = self.organization
        sparky_description = self.personality.get_personality_description()
        system_message = f"You are a helpful AI assistant for electricians in the UK named Sparky. You are trained specifically in BS7671, best practice guides, guidance note books, and other resources. Your goal is to help electricians with any questions or problems they have. Your personality is as follows:\n{sparky_description}"
        prompt_message = f"{system_message}User: {user_input}Sparky: "

        max_tokens = len(user_input) * 2
        response = openai.ChatCompletion.create(
          model="gpt-4",
          prompt=prompt_message,
          max_tokens=max_tokens,
          temperature=self.temperature,
          n=1,
          stop=None,
          frequency_penalty=0,
          presence_penalty=0,
          **{"messages": [{"role": "Sparky", "content": sparky_description}, {"role": "system", "content": system_message}, {"role": "user", "content": user_input}]}
        ).choices[0].text
        if "create_quote" in response:
            client_info = "John Smith"
            quote_text = "Install a new consumer unit in the basement"
            items = [{"name": "consumer unit", "quantity": 1, "price": 650}]
            self.quoting.create_quote(client_info, quote_text, items)
        elif "manage_inventory" in response:
            item_name = "consumer unit"
            quantity = 1
            self.inventory_control.manage_inventory(item_name, quantity)


        return response


if __name__ == '__main__':
    try:
        print("*" * 50)
        print("SPARKY AI ASSISTANT FOR ELECTRICIANS")
        print("*" * 50)
        sparky = SparkyAssistantGPT4()
        while True:
            user_input = input("Enter your question (or type 'exit' to quit): ")
            if user_input.lower() == 'exit':
                print("Exiting Sparky AI Assistant. Have a good day, mate!")
                break
            response = sparky.generate_response(user_input)
            logger.info(f"Sparky: {response}")
    except KeyboardInterrupt:
        print("\nProgram terminated manually.")
